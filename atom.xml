<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SunleDog</title>
  
  <subtitle>SunleDog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-01T13:09:16.946Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Xiaotian Ye</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React 应用SOLID原则02</title>
    <link href="http://example.com/2022/06/22/React%20%E5%BA%94%E7%94%A8SOLID%E5%8E%9F%E5%88%9902/"/>
    <id>http://example.com/2022/06/22/React%20%E5%BA%94%E7%94%A8SOLID%E5%8E%9F%E5%88%9902/</id>
    <published>2022-06-22T11:20:08.000Z</published>
    <updated>2022-08-01T13:09:16.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-应用-SOLID-原则-02"><a href="#React-应用-SOLID-原则-02" class="headerlink" title="React 应用 SOLID 原则 02"></a>React 应用 SOLID 原则 02</h1><h2 id="开放封闭原则（OCP）"><a href="#开放封闭原则（OCP）" class="headerlink" title="开放封闭原则（OCP）"></a>开放封闭原则（OCP）</h2><p>定义：一个软件实体（类，模块，函数）应该对扩展开放，对修改关闭。主张在不更改源代码的情况下扩展组件的方式来构造组件</p><p>以下代码构建了一个 Header 组件，根据页面不同，Header 组件的 UI 也有些不同</p><span id="more"></span><p>代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Header = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pathname &#125; = useRouter();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;Logo /&gt;</span><br><span class="line">      &lt;Actions&gt;</span><br><span class="line">        &#123;pathname === <span class="string">&quot;/dashboard&quot;</span> &amp;&amp; (</span><br><span class="line">          &lt;Link to=<span class="string">&quot;/events/new&quot;</span>&gt;Create event&lt;/Link&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">        &#123;pathname === <span class="string">&quot;/&quot;</span> &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/dashboard&quot;</span>&gt;</span>Go to dashboard<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&#125;</span><br><span class="line">      &lt;/Actions&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HomePage = <span class="function">() =&gt;</span> (</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &lt;OtherHomeStuff /&gt;</span><br><span class="line">  &lt;/&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DashboardPage = <span class="function">() =&gt;</span> (</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &lt;OtherDashboardStuff /&gt;</span><br><span class="line">  &lt;/&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>根据所在页面的不同，呈现指向不同页面组件的链接。但是如果将该 Header 组件添加到更多的页面中，每次创建新页面的时候，都需要引用 Header 组件，改变其内部实现。这种方法使 Header 组件与他的上下文紧密耦合，违背了开放封闭原则</p><p>为了解决这个问题，我们可以使用组件组合。Header 组件不需要关系它内部的渲染是什么，相反，它可以将此责任委托给将使用 Children 属性的组件</p><p>代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Header = <span class="function">(<span class="params">&#123; children &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;Logo /&gt;</span><br><span class="line">    &lt;Actions&gt;&#123;children&#125;&lt;/Actions&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HomePage = <span class="function">() =&gt;</span> (</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;Header&gt;</span><br><span class="line">      &lt;Link to=<span class="string">&quot;/dashboard&quot;</span>&gt;Go to dashboard&lt;/Link&gt;</span><br><span class="line">    &lt;/Header&gt;</span><br><span class="line">    &lt;OtherHomeStuff /&gt;</span><br><span class="line">  &lt;/&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DashboardPage = <span class="function">() =&gt;</span> (</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;Header&gt;</span><br><span class="line">      &lt;Link to=<span class="string">&quot;/events/new&quot;</span>&gt;Create event&lt;/Link&gt;</span><br><span class="line">    &lt;/Header&gt;</span><br><span class="line">    &lt;OtherDashboardStuff /&gt;</span><br><span class="line">  &lt;/&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>使用这种方法，我们完全删除了 Header 组件内部的变量逻辑。现在可以使用组合将任何内容放在 Header 中，而无需修改组件本身。</p><p>遵循开放封闭原则可以减少组件之间的耦合，使他更具有可扩展性和可重用性。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;React-应用-SOLID-原则-02&quot;&gt;&lt;a href=&quot;#React-应用-SOLID-原则-02&quot; class=&quot;headerlink&quot; title=&quot;React 应用 SOLID 原则 02&quot;&gt;&lt;/a&gt;React 应用 SOLID 原则 02&lt;/h1&gt;&lt;h2 id=&quot;开放封闭原则（OCP）&quot;&gt;&lt;a href=&quot;#开放封闭原则（OCP）&quot; class=&quot;headerlink&quot; title=&quot;开放封闭原则（OCP）&quot;&gt;&lt;/a&gt;开放封闭原则（OCP）&lt;/h2&gt;&lt;p&gt;定义：一个软件实体（类，模块，函数）应该对扩展开放，对修改关闭。主张在不更改源代码的情况下扩展组件的方式来构造组件&lt;/p&gt;
&lt;p&gt;以下代码构建了一个 Header 组件，根据页面不同，Header 组件的 UI 也有些不同&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React 应用SOLID原则01</title>
    <link href="http://example.com/2022/06/20/React%20%E5%BA%94%E7%94%A8SOLID%E5%8E%9F%E5%88%9901/"/>
    <id>http://example.com/2022/06/20/React%20%E5%BA%94%E7%94%A8SOLID%E5%8E%9F%E5%88%9901/</id>
    <published>2022-06-20T10:40:08.000Z</published>
    <updated>2022-08-01T12:54:10.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-应用-SOLID-原则-01"><a href="#React-应用-SOLID-原则-01" class="headerlink" title="React 应用 SOLID 原则 01"></a>React 应用 SOLID 原则 01</h1><p>在面向对象编程中，SOLID 原则是设计模式的基础，每个字母分别对应如下：</p><ul><li>单一职责原则（SRP）</li><li>开放封闭原则（OCP）</li><li>里氏替换原则（LSP）</li><li>接口隔离原则（ISP）</li><li>依赖倒置原则（DIP）</li></ul><p>下面看一下每个原则在 React 中的应用</p><h2 id="单一职责原则（SRP）"><a href="#单一职责原则（SRP）" class="headerlink" title="单一职责原则（SRP）"></a>单一职责原则（SRP）</h2><p>定义：每个应用应该只有一个职责，也就是只做一件事，可以简单的理解为每个功能/模块/组件都应该只做一件事</p><p>为了确保每个组件只做一件事</p><ul><li>将功能较多的大型组件拆分为较小的组件</li><li>将与功能无关的代码提取到单独的函数中</li><li>将有联系的功能提取到自定义 hooks 中</li></ul><span id="more"></span><p>代码演示：</p><p>显示活跃用户列表的组件</p><p>该组件：获取数据，过滤数据，渲染数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ActiveUsersList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, setUsers] = useState([]);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> loadUsers = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">&quot;/some-api&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> response.json();</span><br><span class="line">      setUsers(data);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    loadUsers();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> weekAgo = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  weekAgo.setDate(weekAgo.getDate() - <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;users</span><br><span class="line">        .filter(<span class="function">(<span class="params">user</span>) =&gt;</span> !user.isBanned &amp;&amp; user.lastActivityAt &gt;= weekAgo)</span><br><span class="line">        .map(<span class="function">(<span class="params">user</span>) =&gt;</span> (</span><br><span class="line">          &lt;li key=&#123;user.id&#125;&gt;</span><br><span class="line">            &lt;img src=&#123;user.avatarUrl&#125; /&gt;</span><br><span class="line">            &lt;p&gt;&#123;user.fullName&#125;&lt;/p&gt;</span><br><span class="line">            &lt;small&gt;&#123;user.role&#125;&lt;/small&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同时使用了 useState 和 useEffect，我没可以将他提取到自定义 hook 中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useUsers = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, setUsers] = useState([]);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> loadUsers = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">&quot;/some-api&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> response.json();</span><br><span class="line">      setUsers(data);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    loadUsers();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; users &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ActiveUsersList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; users &#125; = useUsers();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> weekAgo = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  weekAgo.setDate(weekAgo.getDate() - <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;users</span><br><span class="line">        .filter(<span class="function">(<span class="params">user</span>) =&gt;</span> !user.isBanned &amp;&amp; user.lastActivityAt &gt;= weekAgo)</span><br><span class="line">        .map(<span class="function">(<span class="params">user</span>) =&gt;</span> (</span><br><span class="line">          &lt;li key=&#123;user.id&#125;&gt;</span><br><span class="line">            &lt;img src=&#123;user.avatarUrl&#125; /&gt;</span><br><span class="line">            &lt;p&gt;&#123;user.fullName&#125;&lt;/p&gt;</span><br><span class="line">            &lt;small&gt;&#123;user.role&#125;&lt;/small&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在，useUser hook 只关心一件事：从 api 获取用户，它使我们的组件更具有可读性</p><p>接下来看组件渲染 jsx，我没对对象数组进行遍历，要注意每个数组项生成的 jsx 的复杂性</p><ul><li>如果他是一个没有附加任何事件处理函数的单行代码，那么保持内联</li><li>对于更复杂的 jsx，建议将其提取为单独的组件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserItem = <span class="function">(<span class="params">&#123; user &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;img src=&#123;user.avatarUrl&#125; /&gt;</span><br><span class="line">      &lt;p&gt;&#123;user.fullName&#125;&lt;/p&gt;</span><br><span class="line">      &lt;small&gt;&#123;user.role&#125;&lt;/small&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ActiveUsersList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; users &#125; = useUsers();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> weekAgo = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  weekAgo.setDate(weekAgo.getDate() - <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;users</span><br><span class="line">        .filter(<span class="function">(<span class="params">user</span>) =&gt;</span> !user.isBanned &amp;&amp; user.lastActivityAt &gt;= weekAgo)</span><br><span class="line">        .map(<span class="function">(<span class="params">user</span>) =&gt;</span> (</span><br><span class="line">          &lt;UserItem key=&#123;user.id&#125; user=&#123;user&#125; /&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们将用于呈现用户信息的逻辑提取到了单独的组件中，从而我们的组件更小，更可读</p><p>最后对于从 api 获取到的用户列表中所过滤出的非活跃用户的逻辑是相对独立的，可以在其他部分重用，所以可以提取到一个公共函数中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getOnlyActive = <span class="function">(<span class="params">users</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> weekAgo = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  weekAgo.setDate(weekAgo.getDate() - <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> users.filter(</span><br><span class="line">    (user) =&gt; !user.isBanned &amp;&amp; user.lastActivityAt &gt;= weekAgo</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ActiveUsersList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; users &#125; = useUsers();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;getOnlyActive(users).map(<span class="function">(<span class="params">user</span>) =&gt;</span> (</span><br><span class="line">        &lt;UserItem key=&#123;user.id&#125; user=&#123;user&#125; /&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过上面几个步骤，组件已经变得非常简单，但是还有优化空间。理论上我们只需要获取数据并渲染他，而不需要任何额外的操作，所以可以将 获取数据，过滤数据 这个操作封装到一个新的自定义 hooks 中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line"><span class="keyword">const</span> useUsers = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, setUsers] = useState([]);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> loadUsers = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">&quot;/some-api&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> response.json();</span><br><span class="line">      setUsers(data);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    loadUsers();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; users &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列表渲染</span></span><br><span class="line"><span class="keyword">const</span> UserItem = <span class="function">(<span class="params">&#123; user &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;img src=&#123;user.avatarUrl&#125; /&gt;</span><br><span class="line">      &lt;p&gt;&#123;user.fullName&#125;&lt;/p&gt;</span><br><span class="line">      &lt;small&gt;&#123;user.role&#125;&lt;/small&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列表过滤</span></span><br><span class="line"><span class="keyword">const</span> getOnlyActive = <span class="function">(<span class="params">users</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> weekAgo = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  weekAgo.setDate(weekAgo.getDate() - <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> users.filter(</span><br><span class="line">    (user) =&gt; !user.isBanned &amp;&amp; user.lastActivityAt &gt;= weekAgo</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useActiveUsers = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; users &#125; = useUsers();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> activeUsers = useMemo(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getOnlyActive(users);</span><br><span class="line">  &#125;, [users]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; activeUsers &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ActiveUsersList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; activeUsers &#125; = useActiveUsers();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;activeUsers.map(<span class="function">(<span class="params">user</span>) =&gt;</span> (</span><br><span class="line">        &lt;UserItem key=&#123;user.id&#125; user=&#123;user&#125; /&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里我们创建了 useActiveUsers hook 来处理获取数据和过滤数据，这样组件只做了一件事：渲染他从 hook 中获取的数据</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;React-应用-SOLID-原则-01&quot;&gt;&lt;a href=&quot;#React-应用-SOLID-原则-01&quot; class=&quot;headerlink&quot; title=&quot;React 应用 SOLID 原则 01&quot;&gt;&lt;/a&gt;React 应用 SOLID 原则 01&lt;/h1&gt;&lt;p&gt;在面向对象编程中，SOLID 原则是设计模式的基础，每个字母分别对应如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一职责原则（SRP）&lt;/li&gt;
&lt;li&gt;开放封闭原则（OCP）&lt;/li&gt;
&lt;li&gt;里氏替换原则（LSP）&lt;/li&gt;
&lt;li&gt;接口隔离原则（ISP）&lt;/li&gt;
&lt;li&gt;依赖倒置原则（DIP）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面看一下每个原则在 React 中的应用&lt;/p&gt;
&lt;h2 id=&quot;单一职责原则（SRP）&quot;&gt;&lt;a href=&quot;#单一职责原则（SRP）&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则（SRP）&quot;&gt;&lt;/a&gt;单一职责原则（SRP）&lt;/h2&gt;&lt;p&gt;定义：每个应用应该只有一个职责，也就是只做一件事，可以简单的理解为每个功能/模块/组件都应该只做一件事&lt;/p&gt;
&lt;p&gt;为了确保每个组件只做一件事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将功能较多的大型组件拆分为较小的组件&lt;/li&gt;
&lt;li&gt;将与功能无关的代码提取到单独的函数中&lt;/li&gt;
&lt;li&gt;将有联系的功能提取到自定义 hooks 中&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>无障碍化 导航栏与可展开按钮</title>
    <link href="http://example.com/2022/06/15/%E6%97%A0%E9%9A%9C%E7%A2%8D%E5%8C%96%20%E5%AF%BC%E8%88%AA%E6%A0%8F%E4%B8%8E%E5%8F%AF%E5%B1%95%E5%BC%80%E6%8C%89%E9%92%AE/"/>
    <id>http://example.com/2022/06/15/%E6%97%A0%E9%9A%9C%E7%A2%8D%E5%8C%96%20%E5%AF%BC%E8%88%AA%E6%A0%8F%E4%B8%8E%E5%8F%AF%E5%B1%95%E5%BC%80%E6%8C%89%E9%92%AE/</id>
    <published>2022-06-15T11:11:58.000Z</published>
    <updated>2022-07-31T02:55:05.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无障碍化-导航栏与可展开按钮"><a href="#无障碍化-导航栏与可展开按钮" class="headerlink" title="无障碍化 导航栏与可展开按钮"></a>无障碍化 导航栏与可展开按钮</h1><p>测试工具：</p><ul><li>NVDA screen reader （Free screen reader for Windows）<a href="https://www.nvaccess.org/">NV Access</a></li><li>ChromeVox （Free chrome extension）<a href="https://chrome.google.com/webstore/detail/screen-reader/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en">Screen Reader - Chrome Web Store (google.com)</a></li></ul><p>代码实现：</p><span id="more"></span><ul><li>对于导航栏，添加 nav 标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nav标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/who&quot;</span>&gt;</span>Who am I<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/services&quot;</span>&gt;</span>Services<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;contact&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>对于可折叠 button</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可展开按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;sect1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span></span><br><span class="line">      button</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;sect1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;region&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220731105155702.png" alt="image-20220731105155702"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;无障碍化-导航栏与可展开按钮&quot;&gt;&lt;a href=&quot;#无障碍化-导航栏与可展开按钮&quot; class=&quot;headerlink&quot; title=&quot;无障碍化 导航栏与可展开按钮&quot;&gt;&lt;/a&gt;无障碍化 导航栏与可展开按钮&lt;/h1&gt;&lt;p&gt;测试工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NVDA screen reader （Free screen reader for Windows）&lt;a href=&quot;https://www.nvaccess.org/&quot;&gt;NV Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ChromeVox （Free chrome extension）&lt;a href=&quot;https://chrome.google.com/webstore/detail/screen-reader/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en&quot;&gt;Screen Reader - Chrome Web Store (google.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码实现：&lt;/p&gt;</summary>
    
    
    
    <category term="无障碍化" scheme="http://example.com/categories/%E6%97%A0%E9%9A%9C%E7%A2%8D%E5%8C%96/"/>
    
    
    <category term="无障碍化" scheme="http://example.com/tags/%E6%97%A0%E9%9A%9C%E7%A2%8D%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks 05</title>
    <link href="http://example.com/2022/05/15/React%20Hooks%2005/"/>
    <id>http://example.com/2022/05/15/React%20Hooks%2005/</id>
    <published>2022-05-15T09:22:08.000Z</published>
    <updated>2022-08-01T10:33:44.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Hooks-05"><a href="#React-Hooks-05" class="headerlink" title="React Hooks 05"></a>React Hooks 05</h1><p>useContext()和 useReducer()配合使用可以减少组件层级</p><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext()"></a>useContext()</h2><p>useContext()会创建一个上下文对象，对外暴露消费者和生产者，在上下文之内的所有子组件都可以访问这个上下文环境之内的数据</p><p>简单的说 context 就是对他所包含的组件树提供全局共享数据的技术</p><p>缺点：</p><ol><li>增加调试复杂度，很难跟踪某个 context 的变化是如何产生的</li></ol><span id="more"></span><ol start="2"><li>让组件复用变得困难，因为一个组件使用 context，他必须确保被用到的地方必须有个 context 的 provider 在父组件上</li></ol><p>代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个上下文，提供两种不同的页面主题样式</span></span><br><span class="line"><span class="keyword">const</span> themes = &#123;</span><br><span class="line">  light: &#123;</span><br><span class="line">    foreground: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">    background: <span class="string">&quot;#eeeeee&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  dark: &#123;</span><br><span class="line">    foreground: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">    background: <span class="string">&quot;#222222&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext(themes.light);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ThemedButton做为消费者，通过useContext获取上下文</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ThemedButton</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> theme = useContext(ThemeContext);</span><br><span class="line">  <span class="keyword">const</span> [themes, setthemes] = useState(theme.dark);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          width: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">          height: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">          background: themes.background,</span><br><span class="line">          color: themes.foreground,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;&lt;/div&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> setthemes(theme.light)&#125;&gt;Light&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> setthemes(theme.dark)&#125;&gt;Dark&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个toolbar组件，里面包含了ThemedButton</span></span><br><span class="line"><span class="comment">// ThemeContext.Provider包裹，value就是提供的上下文对象</span></span><br><span class="line"><span class="keyword">const</span> ToolBar = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ThemeContext.Provider value=&#123;themes&#125;&gt;</span><br><span class="line">      &lt;ThemedButton /&gt;</span><br><span class="line">    &lt;/ThemeContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ToolBar;</span><br></pre></td></tr></table></figure><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer()"></a>useReducer()</h2><p>工作流程：</p><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220801182429851.png" alt="image-20220801182429851"></p><p>代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AddAndMinus = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 初始状态</span></span><br><span class="line">  <span class="keyword">const</span> initState = &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reducer根据action进行逻辑处理</span></span><br><span class="line">  <span class="comment">// preState是老状态</span></span><br><span class="line">  <span class="comment">// action是dispatch过来的</span></span><br><span class="line">  <span class="keyword">const</span> reducer = <span class="function">(<span class="params">preState, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">        <span class="comment">// 不可以直接对preState进行修改</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">count</span>: preState.count + <span class="number">1</span> &#125;;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;minus&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">count</span>: preState.count - <span class="number">1</span> &#125;;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> preState;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 订阅useReducer</span></span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// dispatch出去</span></span><br><span class="line">          dispatch(&#123;</span><br><span class="line">            type: <span class="string">&quot;add&quot;</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        +</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &#123;state.count&#125;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// dispatch出去</span></span><br><span class="line">          dispatch(&#123;</span><br><span class="line">            type: <span class="string">&quot;minus&quot;</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        -</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AddAndMinus;</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>代码变长，但理解起来更简洁明了，拥有更好的可读性</li><li>reducer 可以将逻辑与 ui 分离</li><li>state 都集中到 reducer 中进行处理，更容易复用 state 逻辑变化代码，特别对于 state 变化很复杂的场景</li><li>深层子组件需要修改一些状态，state 变化复杂，一个操作需要修改很多 state，ui 与业务分开维护，优先考虑使用 reducer</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;React-Hooks-05&quot;&gt;&lt;a href=&quot;#React-Hooks-05&quot; class=&quot;headerlink&quot; title=&quot;React Hooks 05&quot;&gt;&lt;/a&gt;React Hooks 05&lt;/h1&gt;&lt;p&gt;useContext()和 useReducer()配合使用可以减少组件层级&lt;/p&gt;
&lt;h2 id=&quot;useContext&quot;&gt;&lt;a href=&quot;#useContext&quot; class=&quot;headerlink&quot; title=&quot;useContext()&quot;&gt;&lt;/a&gt;useContext()&lt;/h2&gt;&lt;p&gt;useContext()会创建一个上下文对象，对外暴露消费者和生产者，在上下文之内的所有子组件都可以访问这个上下文环境之内的数据&lt;/p&gt;
&lt;p&gt;简单的说 context 就是对他所包含的组件树提供全局共享数据的技术&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;增加调试复杂度，很难跟踪某个 context 的变化是如何产生的&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks 04</title>
    <link href="http://example.com/2022/05/12/React%20Hooks%2004/"/>
    <id>http://example.com/2022/05/12/React%20Hooks%2004/</id>
    <published>2022-05-12T04:12:08.000Z</published>
    <updated>2022-08-01T05:34:54.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Hooks-04"><a href="#React-Hooks-04" class="headerlink" title="React Hooks 04"></a>React Hooks 04</h1><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef()"></a>useRef()</h2><p>绑在 html 上保存 dom 节点</p><p>绑在组件上保存组件对象</p><p>代码：</p><span id="more"></span><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;</span><br><span class="line">  useCallback,</span><br><span class="line">  useEffect,</span><br><span class="line">  useMemo,</span><br><span class="line">  useRef,</span><br><span class="line">  useState,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ToDoList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化text与lists</span></span><br><span class="line">  <span class="comment">// const [text, setText] = useState(&quot;&quot;);</span></span><br><span class="line">  <span class="keyword">const</span> [lists, setLists] = useState([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> myText = useRef();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// const handleChange = useCallback((evt) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   setText(evt.target.value);</span></span><br><span class="line">  <span class="comment">// &#125;, []);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClickAdd = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// dom节点</span></span><br><span class="line">    <span class="built_in">console</span>.log(myText);</span><br><span class="line">    <span class="built_in">console</span>.log(myText.current.value);</span><br><span class="line">    setLists([...lists, myText.current.value]);</span><br><span class="line">    <span class="comment">// 不能使用push修改原数组，因为修改数组不会重新渲染页面</span></span><br><span class="line">    <span class="comment">// setLists([...lists, text]);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空input</span></span><br><span class="line">    <span class="comment">// setText(&quot;&quot;);</span></span><br><span class="line">    myText.current.value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;, [lists]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClickDelete = useCallback(</span><br><span class="line">    (index) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 创建新数组接收lists</span></span><br><span class="line">      <span class="keyword">let</span> newLists = [...lists];</span><br><span class="line">      <span class="comment">// 根据id删除</span></span><br><span class="line">      newLists.splice(index, <span class="number">1</span>);</span><br><span class="line">      setLists(newLists);</span><br><span class="line">    &#125;,</span><br><span class="line">    [lists]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当lists发生改变的时候打印 fuck 996</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;fuck 996&quot;</span>);</span><br><span class="line">  &#125;, [lists]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useeffect return</span></span><br><span class="line">  <span class="comment">// useEffect(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   window.onresize = () =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     console.log(&quot;resize&quot;);</span></span><br><span class="line">  <span class="comment">//   &#125;;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   let timer = setInterval(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     console.log(&quot;fuck&quot;);</span></span><br><span class="line">  <span class="comment">//   &#125;, 1000);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   // 闭包</span></span><br><span class="line">  <span class="comment">//   return () =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     console.log(&quot;组件销毁时执行&quot;);</span></span><br><span class="line">  <span class="comment">//     window.onresize = null;</span></span><br><span class="line">  <span class="comment">//     timer = clearInterval;</span></span><br><span class="line">  <span class="comment">//   &#125;;</span></span><br><span class="line">  <span class="comment">// &#125;, []);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给list增加996</span></span><br><span class="line">  <span class="comment">// 没用memo的情况下，当别的状态改变的时候都重新触发该函数</span></span><br><span class="line">  <span class="comment">// let list996 = lists.map((v) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&quot;fuck&quot;);</span></span><br><span class="line">  <span class="comment">//   return v + &quot;996&quot;;</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用memo的情况下</span></span><br><span class="line">  <span class="comment">// 只有当依赖中的lists发生改变的时候，才会重新计算</span></span><br><span class="line">  <span class="keyword">const</span> list996 = useMemo(</span><br><span class="line">    () =&gt;</span><br><span class="line">      lists.map(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v + <span class="string">&quot;996&quot;</span>;</span><br><span class="line">      &#125;),</span><br><span class="line">    [lists]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input ref=&#123;myText&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleClickAdd&#125;&gt;add to <span class="keyword">do</span> list&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;list996.map(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;div key=&#123;index&#125;&gt;</span><br><span class="line">              &lt;div&gt;&#123;value&#125;&lt;/div&gt;</span><br><span class="line">              &lt;button</span><br><span class="line">                onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                  handleClickDelete(index);</span><br><span class="line">                &#125;&#125;</span><br><span class="line">              &gt;</span><br><span class="line">                <span class="keyword">delete</span></span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ToDoList;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;React-Hooks-04&quot;&gt;&lt;a href=&quot;#React-Hooks-04&quot; class=&quot;headerlink&quot; title=&quot;React Hooks 04&quot;&gt;&lt;/a&gt;React Hooks 04&lt;/h1&gt;&lt;h2 id=&quot;useRef&quot;&gt;&lt;a href=&quot;#useRef&quot; class=&quot;headerlink&quot; title=&quot;useRef()&quot;&gt;&lt;/a&gt;useRef()&lt;/h2&gt;&lt;p&gt;绑在 html 上保存 dom 节点&lt;/p&gt;
&lt;p&gt;绑在组件上保存组件对象&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks 03</title>
    <link href="http://example.com/2022/05/11/React%20Hooks%2003/"/>
    <id>http://example.com/2022/05/11/React%20Hooks%2003/</id>
    <published>2022-05-11T12:11:31.000Z</published>
    <updated>2022-07-31T17:49:37.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Hooks-03"><a href="#React-Hooks-03" class="headerlink" title="React Hooks 03"></a>React Hooks 03</h1><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo()"></a>useMemo()</h2><p>记忆组件</p><p>与 useCallback()的区别</p><ol><li>useCallback()不会执行第一个参数函数，而是将它返回</li><li>useMemo()则是执行第一个函数参数，将函数的执行结果返回</li></ol><p>代码</p><span id="more"></span><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给list增加996</span></span><br><span class="line"><span class="comment">// 没用memo的情况下，当别的状态改变的时候都重新触发该函数</span></span><br><span class="line"><span class="comment">// let list996 = lists.map((v) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&quot;fuck&quot;);</span></span><br><span class="line"><span class="comment">//   return v + &quot;996&quot;;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用memo的情况下</span></span><br><span class="line"><span class="comment">// 只有当依赖中的lists发生改变的时候，才会重新计算</span></span><br><span class="line"><span class="keyword">const</span> list996 = useMemo(</span><br><span class="line">  () =&gt;</span><br><span class="line">    lists.map(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> v + <span class="string">&quot;996&quot;</span>;</span><br><span class="line">    &#125;),</span><br><span class="line">  [lists]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;React-Hooks-03&quot;&gt;&lt;a href=&quot;#React-Hooks-03&quot; class=&quot;headerlink&quot; title=&quot;React Hooks 03&quot;&gt;&lt;/a&gt;React Hooks 03&lt;/h1&gt;&lt;h2 id=&quot;useMemo&quot;&gt;&lt;a href=&quot;#useMemo&quot; class=&quot;headerlink&quot; title=&quot;useMemo()&quot;&gt;&lt;/a&gt;useMemo()&lt;/h2&gt;&lt;p&gt;记忆组件&lt;/p&gt;
&lt;p&gt;与 useCallback()的区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;useCallback()不会执行第一个参数函数，而是将它返回&lt;/li&gt;
&lt;li&gt;useMemo()则是执行第一个函数参数，将函数的执行结果返回&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks 02</title>
    <link href="http://example.com/2022/05/10/React%20Hooks%2002/"/>
    <id>http://example.com/2022/05/10/React%20Hooks%2002/</id>
    <published>2022-05-09T16:31:51.000Z</published>
    <updated>2022-07-31T17:32:29.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Hooks-02"><a href="#React-Hooks-02" class="headerlink" title="React Hooks 02"></a>React Hooks 02</h1><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback()"></a>useCallback()</h2><ol><li>记忆函数，防止因为组件渲染导致的函数重新创建，起到缓存作用</li><li>当依赖中的参数发生改变则会重新生命函数</li><li>当与之无关的状态发生改变的时候导致页面渲染，则不会重新声明函数</li></ol><p>代码：</p><span id="more"></span><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleChange = useCallback(<span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">  setText(evt.target.value);</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleClickAdd = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 不能使用push修改原数组，因为修改数组不会重新渲染页面</span></span><br><span class="line">  setLists([...lists, text]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空input</span></span><br><span class="line">  setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;, [lists, text]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleClickDelete = useCallback(</span><br><span class="line">  (index) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 创建新数组接收lists</span></span><br><span class="line">    <span class="keyword">let</span> newLists = [...lists];</span><br><span class="line">    <span class="comment">// 根据id删除</span></span><br><span class="line">    newLists.splice(index, <span class="number">1</span>);</span><br><span class="line">    setLists(newLists);</span><br><span class="line">  &#125;,</span><br><span class="line">  [lists]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;React-Hooks-02&quot;&gt;&lt;a href=&quot;#React-Hooks-02&quot; class=&quot;headerlink&quot; title=&quot;React Hooks 02&quot;&gt;&lt;/a&gt;React Hooks 02&lt;/h1&gt;&lt;h2 id=&quot;useCallback&quot;&gt;&lt;a href=&quot;#useCallback&quot; class=&quot;headerlink&quot; title=&quot;useCallback()&quot;&gt;&lt;/a&gt;useCallback()&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;记忆函数，防止因为组件渲染导致的函数重新创建，起到缓存作用&lt;/li&gt;
&lt;li&gt;当依赖中的参数发生改变则会重新生命函数&lt;/li&gt;
&lt;li&gt;当与之无关的状态发生改变的时候导致页面渲染，则不会重新声明函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码：&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks 01</title>
    <link href="http://example.com/2022/05/09/React%20Hooks%2001/"/>
    <id>http://example.com/2022/05/09/React%20Hooks%2001/</id>
    <published>2022-05-09T14:41:40.000Z</published>
    <updated>2022-07-31T16:32:48.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Hooks-01"><a href="#React-Hooks-01" class="headerlink" title="React Hooks 01"></a>React Hooks 01</h1><h2 id="useState"><a href="#useState" class="headerlink" title="useState()"></a>useState()</h2><p>用一个简单的 todolist demo 来演示 useState()的作用：</p><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220731233818028.png" alt="image-20220731233818028"></p><p>代码：</p><span id="more"></span><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ToDoList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化text与lists</span></span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [lists, setLists] = useState([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleChange = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">    setText(evt.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClickAdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 不能使用push修改原数组，因为修改数组不会重新渲染页面</span></span><br><span class="line">    setLists([...lists, text]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空input</span></span><br><span class="line">    setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClickDelete = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建新数组接收lists</span></span><br><span class="line">    <span class="keyword">let</span> newLists = [...lists];</span><br><span class="line">    <span class="comment">// 根据id删除</span></span><br><span class="line">    newLists.splice(index, <span class="number">1</span>);</span><br><span class="line">    setLists(newLists);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input onChange=&#123;handleChange&#125; value=&#123;text&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleClickAdd&#125;&gt;add to <span class="keyword">do</span> list&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;lists.map(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;div key=&#123;index&#125;&gt;</span><br><span class="line">              &lt;div&gt;&#123;value&#125;&lt;/div&gt;</span><br><span class="line">              &lt;button</span><br><span class="line">                onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                  handleClickDelete(index);</span><br><span class="line">                &#125;&#125;</span><br><span class="line">              &gt;</span><br><span class="line">                <span class="keyword">delete</span></span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ToDoList;</span><br></pre></td></tr></table></figure><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect()"></a>useEffect()</h2><p>可以代替类组件中的生命周期</p><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220731234839234.png" alt="image-20220731234839234"></p><ol><li>当依赖数组为空数组的时候表示不依赖，useeffect 在渲染的时候只会执行一次</li><li>如果依赖数组中有依赖，当依赖值发生改变的时候，会重新执行 useEffect()</li></ol><p>代码演示：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ToDoList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化text与lists</span></span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [lists, setLists] = useState([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleChange = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">    setText(evt.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClickAdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 不能使用push修改原数组，因为修改数组不会重新渲染页面</span></span><br><span class="line">    setLists([...lists, text]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空input</span></span><br><span class="line">    setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClickDelete = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建新数组接收lists</span></span><br><span class="line">    <span class="keyword">let</span> newLists = [...lists];</span><br><span class="line">    <span class="comment">// 根据id删除</span></span><br><span class="line">    newLists.splice(index, <span class="number">1</span>);</span><br><span class="line">    setLists(newLists);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当lists发生改变的时候打印 fuck 996</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;fuck 996&quot;</span>);</span><br><span class="line">  &#125;, [lists]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input onChange=&#123;handleChange&#125; value=&#123;text&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleClickAdd&#125;&gt;add to <span class="keyword">do</span> list&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;lists.map(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;div key=&#123;index&#125;&gt;</span><br><span class="line">              &lt;div&gt;&#123;value&#125;&lt;/div&gt;</span><br><span class="line">              &lt;button</span><br><span class="line">                onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                  handleClickDelete(index);</span><br><span class="line">                &#125;&#125;</span><br><span class="line">              &gt;</span><br><span class="line">                <span class="keyword">delete</span></span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ToDoList;</span><br></pre></td></tr></table></figure><ol start="3"><li>useeffec()中的 return 回调函数，在没有依赖的时候，当组件销毁的时候执行，如果有依赖则每次依赖发生变化和组件销毁的时候执行</li></ol><p>代码演示</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useeffect return</span></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.onresize = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;resize&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;fuck&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;组件销毁时执行&quot;</span>);</span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="literal">null</span>;</span><br><span class="line">    timer = <span class="built_in">clearInterval</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><h2 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect()"></a>useLayoutEffect()</h2><p>useEffect()与 useLayoutEffect()的区别</p><ol><li>useLayoutEffect()在 react 更新完 dom 树后会立即<strong>同步调用</strong>里面的代码，会阻塞页面渲染（渲染树）<ul><li>useEffect()在页面渲染完后才调用，因此一般情况 useEffect()效果更好</li></ul></li><li>如果做纯 dom 操作，推荐使用 useLayoutEffect()<ul><li><strong>避免抖动</strong>，在 useLayoutEffect()中做的 dom 操作会和 react 做出的更改一起被一次性渲染到页面，只有一次回流重绘的代价</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;React-Hooks-01&quot;&gt;&lt;a href=&quot;#React-Hooks-01&quot; class=&quot;headerlink&quot; title=&quot;React Hooks 01&quot;&gt;&lt;/a&gt;React Hooks 01&lt;/h1&gt;&lt;h2 id=&quot;useState&quot;&gt;&lt;a href=&quot;#useState&quot; class=&quot;headerlink&quot; title=&quot;useState()&quot;&gt;&lt;/a&gt;useState()&lt;/h2&gt;&lt;p&gt;用一个简单的 todolist demo 来演示 useState()的作用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220731233818028.png&quot; alt=&quot;image-20220731233818028&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 模拟实现call apply bind方法</title>
    <link href="http://example.com/2022/04/08/JavaScript%20%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%20apply%20bind%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/04/08/JavaScript%20%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%20apply%20bind%E6%96%B9%E6%B3%95/</id>
    <published>2022-04-08T10:21:56.000Z</published>
    <updated>2022-08-01T05:39:41.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-模拟实现-call-apply-bind-方法"><a href="#JavaScript-模拟实现-call-apply-bind-方法" class="headerlink" title="JavaScript 模拟实现 call apply bind 方法"></a>JavaScript 模拟实现 call apply bind 方法</h1><p>首先来说下这三个的区别：</p><ul><li><code>call</code> <code>apply</code>都是为了解决 this 的指向，默认第一参数是 this 的指向，剩下的参数是函数形参，<code>call</code>接收的形参是一个列表用逗号隔开，<code>apply</code>接收的是一个参数数组。</li><li><code>call</code> <code>apply</code>改变函数的 this 指向以后立马执行该函数，而<code>bind</code>是返回一个绑定上下文的新函数，后续再执行。</li><li>bind 函数返回的新函数不可以再通过 apply call 改变它的 this 指向。</li></ul><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">getValue.call(a, <span class="string">&quot;fuck&quot;</span>, <span class="string">&quot;24&quot;</span>); <span class="comment">// fuck 24 1; 立即执行</span></span><br><span class="line">getValue.apply(a, [<span class="string">&quot;shit&quot;</span>, <span class="string">&quot;24&quot;</span>]); <span class="comment">// shit 24 1；立即执行</span></span><br><span class="line">getValue.bind(a)(<span class="string">&quot;fuck&quot;</span>, <span class="string">&quot;24&quot;</span>); <span class="comment">// fuck 24 1；(&#x27;fuck&#x27;, &#x27;24&#x27;)这部分才是执行函数</span></span><br><span class="line">getValue.bind(a)([<span class="string">&quot;shit&quot;</span>, <span class="string">&quot;24&quot;</span>]); <span class="comment">// [&#x27;shit&#x27;, &#x27;24&#x27;] undefined 1；([&#x27;shit&#x27;, &#x27;24&#x27;])才是执行函数</span></span><br></pre></td></tr></table></figure><h2 id="模拟实现-call"><a href="#模拟实现-call" class="headerlink" title="模拟实现 call"></a>模拟实现 call</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="comment">// 给 context 添加一个属性</span></span><br><span class="line">  <span class="comment">// getValue.call(a, &#x27;fuck&#x27;, &#x27;24&#x27;) =&gt; a.fn = getValue</span></span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="comment">// 将 context 后面的参数取出来</span></span><br><span class="line">  <span class="keyword">var</span> args = [...arguments].slice(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// getValue.call(a, &#x27;fuck&#x27;, &#x27;24&#x27;) =&gt; a.fn(&#x27;fuck&#x27;, &#x27;24&#x27;)</span></span><br><span class="line">  <span class="keyword">var</span> result = context.fn(...args);</span><br><span class="line">  <span class="comment">// 删除 fn</span></span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">getValue.myCall(a, <span class="string">&quot;fuck&quot;</span>, <span class="string">&quot;24&quot;</span>); <span class="comment">//fuck 24 1</span></span><br></pre></td></tr></table></figure><h2 id="模拟实现-apply"><a href="#模拟实现-apply" class="headerlink" title="模拟实现 apply"></a>模拟实现 apply</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    result = context.fn(...arguments[<span class="number">1</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = context.fn();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">getValue.myApply(a, [<span class="string">&quot;fuck&quot;</span>, <span class="string">&quot;24&quot;</span>]); <span class="comment">//fuck 24 1</span></span><br></pre></td></tr></table></figure><h2 id="模拟实现-bind"><a href="#模拟实现-bind" class="headerlink" title="模拟实现 bind"></a>模拟实现 bind</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = [...arguments].slice(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> <span class="keyword">instanceof</span> F) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> _this(...args, ...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _this.apply(context, args.concat(...arguments));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">getValue.myBind(a, <span class="string">&quot;fuck&quot;</span>, <span class="string">&quot;24&quot;</span>)(); <span class="comment">//fuck 24 1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JavaScript-模拟实现-call-apply-bind-方法&quot;&gt;&lt;a href=&quot;#JavaScript-模拟实现-call-apply-bind-方法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 模拟实现 call apply bind 方法&quot;&gt;&lt;/a&gt;JavaScript 模拟实现 call apply bind 方法&lt;/h1&gt;&lt;p&gt;首先来说下这三个的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;call&lt;/code&gt; &lt;code&gt;apply&lt;/code&gt;都是为了解决 this 的指向，默认第一参数是 this 的指向，剩下的参数是函数形参，&lt;code&gt;call&lt;/code&gt;接收的形参是一个列表用逗号隔开，&lt;code&gt;apply&lt;/code&gt;接收的是一个参数数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call&lt;/code&gt; &lt;code&gt;apply&lt;/code&gt;改变函数的 this 指向以后立马执行该函数，而&lt;code&gt;bind&lt;/code&gt;是返回一个绑定上下文的新函数，后续再执行。&lt;/li&gt;
&lt;li&gt;bind 函数返回的新函数不可以再通过 apply call 改变它的 this 指向。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的构造02</title>
    <link href="http://example.com/2022/03/13/Leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A002/"/>
    <id>http://example.com/2022/03/13/Leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A002/</id>
    <published>2022-03-13T09:11:39.000Z</published>
    <updated>2022-07-29T08:50:33.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-二叉树的构造-02"><a href="#Leetcode-二叉树的构造-02" class="headerlink" title="Leetcode 二叉树的构造 02"></a>Leetcode 二叉树的构造 02</h1><h2 id="前序-后序-构造二叉树"><a href="#前序-后序-构造二叉树" class="headerlink" title="前序+后序 构造二叉树"></a>前序+后序 构造二叉树</h2><p>只能确定根节点，但是不能确定左右子树，因此答案不唯一</p><p>题号：<a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树 - 力扣（LeetCode）</a></p><p>解题流程：</p><p>1、首先把前序遍历结果的第一个元素或者后序遍历结果的最后一个元素确定为根节点的值。</p><p>2、然后把前序遍历结果的第二个元素作为左子树的根节点的值。</p><span id="more"></span><p>3、在后序遍历结果中寻找左子树根节点的值，从而确定了左子树的索引边界，进而确定右子树的索引边界，递归构造左右子树即可。</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">preorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">postorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> constructFromPrePost = <span class="function"><span class="keyword">function</span> (<span class="params">preorder, postorder</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 根左右</span></span><br><span class="line">  <span class="comment">// 左右根</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> build = <span class="function">(<span class="params">preorder, preStart, preEnd, postorder, postStart, postEnd</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (preStart &gt; preEnd) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (preStart === preEnd) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(preorder[preStart]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前序遍历数组的第一个元素为根节点</span></span><br><span class="line">    <span class="keyword">let</span> rootVal = preorder[preStart];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到左子树的根节点</span></span><br><span class="line">    <span class="comment">// 左子树的根节点为前序遍历数组中的第二个元素（左子树可能为null，因此该元素可能是右子树的根节点，因此本题答案不唯一）</span></span><br><span class="line">    <span class="keyword">let</span> leftVal = preorder[preStart + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到左子树根节点在后续遍历数组中的位置</span></span><br><span class="line">    <span class="keyword">let</span> leftIndex = postorder.indexOf(leftVal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左子树数组长度</span></span><br><span class="line">    <span class="keyword">let</span> leftSize = leftIndex - postStart + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line"></span><br><span class="line">    root.left = build(</span><br><span class="line">      preorder,</span><br><span class="line">      preStart + <span class="number">1</span>,</span><br><span class="line">      preStart + leftSize,</span><br><span class="line">      postorder,</span><br><span class="line">      postStart,</span><br><span class="line">      leftIndex</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    root.right = build(</span><br><span class="line">      preorder,</span><br><span class="line">      preStart + leftSize + <span class="number">1</span>,</span><br><span class="line">      preEnd,</span><br><span class="line">      postorder,</span><br><span class="line">      leftIndex + <span class="number">1</span>,</span><br><span class="line">      postEnd - <span class="number">1</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> build(</span><br><span class="line">    preorder,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    preorder.length - <span class="number">1</span>,</span><br><span class="line">    postorder,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    postorder.length - <span class="number">1</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Leetcode-二叉树的构造-02&quot;&gt;&lt;a href=&quot;#Leetcode-二叉树的构造-02&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 二叉树的构造 02&quot;&gt;&lt;/a&gt;Leetcode 二叉树的构造 02&lt;/h1&gt;&lt;h2 id=&quot;前序-后序-构造二叉树&quot;&gt;&lt;a href=&quot;#前序-后序-构造二叉树&quot; class=&quot;headerlink&quot; title=&quot;前序+后序 构造二叉树&quot;&gt;&lt;/a&gt;前序+后序 构造二叉树&lt;/h2&gt;&lt;p&gt;只能确定根节点，但是不能确定左右子树，因此答案不唯一&lt;/p&gt;
&lt;p&gt;题号：&lt;a href=&quot;https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/&quot;&gt;105. 从前序与中序遍历序列构造二叉树 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解题流程：&lt;/p&gt;
&lt;p&gt;1、首先把前序遍历结果的第一个元素或者后序遍历结果的最后一个元素确定为根节点的值。&lt;/p&gt;
&lt;p&gt;2、然后把前序遍历结果的第二个元素作为左子树的根节点的值。&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="http://example.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的构造01</title>
    <link href="http://example.com/2022/03/13/Leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A001/"/>
    <id>http://example.com/2022/03/13/Leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A001/</id>
    <published>2022-03-13T08:21:20.000Z</published>
    <updated>2022-07-29T08:42:03.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-二叉树的构造-01"><a href="#Leetcode-二叉树的构造-01" class="headerlink" title="Leetcode 二叉树的构造 01"></a>Leetcode 二叉树的构造 01</h1><h2 id="前序-中序-构造二叉树"><a href="#前序-中序-构造二叉树" class="headerlink" title="前序+中序 构造二叉树"></a>前序+中序 构造二叉树</h2><p>题号：<a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树 - 力扣（LeetCode）</a></p><p>代码：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">preorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">inorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span> (<span class="params">preorder, inorder</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> build = <span class="function">(<span class="params">preorder, preStart, preEnd, inorder, inStart, inEnd</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 递归终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (preStart &gt; preEnd) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前序遍历数组的第一个元素是 树的根节点</span></span><br><span class="line">    <span class="keyword">let</span> rootVal = preorder[preStart];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到根节点在中序遍历数组中的索引</span></span><br><span class="line">    <span class="keyword">let</span> rootIndex = inorder.indexOf(rootVal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据根节点的索引在中序遍历数组中定位左子树数组的长度</span></span><br><span class="line">    <span class="keyword">let</span> leftSize = rootIndex - inStart;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归构造左右子树</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据左子树数组的长度定位到</span></span><br><span class="line">    <span class="comment">// 左子树在前序遍历数组中的位置</span></span><br><span class="line">    <span class="comment">// 根节点的后一个节点 到 根节点位置+长度</span></span><br><span class="line">    <span class="comment">// 左子树在中序遍历数组中的位置</span></span><br><span class="line">    <span class="comment">// 中序遍历开始的位置，到根节点前一个元素</span></span><br><span class="line">    root.left = build(</span><br><span class="line">      preorder,</span><br><span class="line">      preStart + <span class="number">1</span>,</span><br><span class="line">      preStart + leftSize,</span><br><span class="line">      inorder,</span><br><span class="line">      inStart,</span><br><span class="line">      rootIndex - <span class="number">1</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 右子树在前序遍历数组中的位置</span></span><br><span class="line">    <span class="comment">// 根节点位置+长度+1</span></span><br><span class="line">    <span class="comment">// 右子树在中序遍历数组中的位置</span></span><br><span class="line">    <span class="comment">// 根节点元素位置+1，到数组结尾</span></span><br><span class="line">    root.right = build(</span><br><span class="line">      preorder,</span><br><span class="line">      preStart + leftSize + <span class="number">1</span>,</span><br><span class="line">      preEnd,</span><br><span class="line">      inorder,</span><br><span class="line">      rootIndex + <span class="number">1</span>,</span><br><span class="line">      inEnd</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> build(</span><br><span class="line">    preorder,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    preorder.length - <span class="number">1</span>,</span><br><span class="line">    inorder,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    inorder.length - <span class="number">1</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="后序-中序-构造二叉树"><a href="#后序-中序-构造二叉树" class="headerlink" title="后序+中序 构造二叉树"></a>后序+中序 构造二叉树</h2><p>题号：<a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. 从中序与后序遍历序列构造二叉树 - 力扣（LeetCode）</a></p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">inorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">postorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span> (<span class="params">inorder, postorder</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> build = <span class="function">(<span class="params">inorder, inStart, inEnd, postorder, postStart, postEnd</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (inStart &gt; inEnd) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="comment">// [左，根，右]</span></span><br><span class="line">    <span class="comment">// 后续遍历</span></span><br><span class="line">    <span class="comment">// [左，右，根]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后续遍历数组的最后一位为根节点</span></span><br><span class="line">    <span class="keyword">let</span> rootVal = postorder[postEnd];</span><br><span class="line">    <span class="comment">// 找到根节点在中序遍历数组中的位置</span></span><br><span class="line">    <span class="keyword">let</span> rootIndex = inorder.indexOf(rootVal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造二叉树</span></span><br><span class="line">    <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得左子树数组的长度</span></span><br><span class="line">    <span class="keyword">let</span> leftSize = rootIndex - inStart;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造二叉树的左右子树</span></span><br><span class="line">    root.left = build(</span><br><span class="line">      inorder,</span><br><span class="line">      inStart,</span><br><span class="line">      rootIndex - <span class="number">1</span>,</span><br><span class="line">      postorder,</span><br><span class="line">      postStart,</span><br><span class="line">      postStart + leftSize - <span class="number">1</span></span><br><span class="line">    );</span><br><span class="line">    root.right = build(</span><br><span class="line">      inorder,</span><br><span class="line">      rootIndex + <span class="number">1</span>,</span><br><span class="line">      inEnd,</span><br><span class="line">      postorder,</span><br><span class="line">      postStart + leftSize,</span><br><span class="line">      postEnd - <span class="number">1</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> build(</span><br><span class="line">    inorder,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    inorder.length - <span class="number">1</span>,</span><br><span class="line">    postorder,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    postorder.length - <span class="number">1</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Leetcode-二叉树的构造-01&quot;&gt;&lt;a href=&quot;#Leetcode-二叉树的构造-01&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 二叉树的构造 01&quot;&gt;&lt;/a&gt;Leetcode 二叉树的构造 01&lt;/h1&gt;&lt;h2 id=&quot;前序-中序-构造二叉树&quot;&gt;&lt;a href=&quot;#前序-中序-构造二叉树&quot; class=&quot;headerlink&quot; title=&quot;前序+中序 构造二叉树&quot;&gt;&lt;/a&gt;前序+中序 构造二叉树&lt;/h2&gt;&lt;p&gt;题号：&lt;a href=&quot;https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/&quot;&gt;105. 从前序与中序遍历序列构造二叉树 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="http://example.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的层序遍历</title>
    <link href="http://example.com/2022/03/10/Leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://example.com/2022/03/10/Leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</id>
    <published>2022-03-10T03:01:20.000Z</published>
    <updated>2022-07-29T08:26:40.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-二叉树的层序遍历"><a href="#Leetcode-二叉树的层序遍历" class="headerlink" title="Leetcode 二叉树的层序遍历"></a>Leetcode 二叉树的层序遍历</h1><p>前文分别用递归和迭代遍历二叉树，本文讲一下层序遍历二叉树（BFS）</p><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p>题号：<a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历 - 力扣（LeetCode）</a></p><p>代码：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> queue = [];</span><br><span class="line">  queue.push(root);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// while循环控制从上到下遍历</span></span><br><span class="line">  <span class="keyword">while</span> (queue.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> size = queue.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> level = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for循环控制从左到右遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> cur = queue.shift();</span><br><span class="line">      level.push(cur.val);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cur.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">        queue.push(cur.left);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (cur.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">        queue.push(cur.right);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.push([...level]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Leetcode-二叉树的层序遍历&quot;&gt;&lt;a href=&quot;#Leetcode-二叉树的层序遍历&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 二叉树的层序遍历&quot;&gt;&lt;/a&gt;Leetcode 二叉树的层序遍历&lt;/h1&gt;&lt;p&gt;前文分别用递归和迭代遍历二叉树，本文讲一下层序遍历二叉树（BFS）&lt;/p&gt;
&lt;h2 id=&quot;层序遍历&quot;&gt;&lt;a href=&quot;#层序遍历&quot; class=&quot;headerlink&quot; title=&quot;层序遍历&quot;&gt;&lt;/a&gt;层序遍历&lt;/h2&gt;&lt;p&gt;题号：&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-level-order-traversal/&quot;&gt;102. 二叉树的层序遍历 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="http://example.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的前中后序遍历（迭代）</title>
    <link href="http://example.com/2022/03/04/Leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E8%BF%AD%E4%BB%A3%EF%BC%89/"/>
    <id>http://example.com/2022/03/04/Leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E8%BF%AD%E4%BB%A3%EF%BC%89/</id>
    <published>2022-03-04T02:55:05.000Z</published>
    <updated>2022-07-29T07:57:00.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-二叉树的前中后序遍历（迭代）"><a href="#Leetcode-二叉树的前中后序遍历（迭代）" class="headerlink" title="Leetcode 二叉树的前中后序遍历（迭代）"></a>Leetcode 二叉树的前中后序遍历（迭代）</h1><p>前文讲过二叉树的递归遍历版本，今天讲一下二叉树的迭代遍历</p><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><p>题号：<a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历 - 力扣（LeetCode）</a></p><p>顺序：根节点 左节点 右节点</p><p>代码：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 前序遍历</span></span><br><span class="line">  <span class="comment">// 根节点 左节点 右节点</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 迭代</span></span><br><span class="line">  <span class="comment">// 需要借助栈来实现</span></span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  <span class="keyword">while</span> (root !== <span class="literal">null</span> || stack.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 先把根节点记录下来</span></span><br><span class="line">      result.push(root.val);</span><br><span class="line">      stack.push(root);</span><br><span class="line">      root = root.left;</span><br><span class="line">    &#125;</span><br><span class="line">    root = stack.pop();</span><br><span class="line">    root = root.right;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>题号：<a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历 - 力扣（LeetCode）</a></p><p>顺序：左节点 根节点 右节点</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 中序遍历</span></span><br><span class="line">  <span class="comment">// 左子树 根节点 右子树</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 迭代</span></span><br><span class="line">  <span class="comment">// 借助栈</span></span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当二叉树遍历完毕 或者 栈中没有元素 停止遍历</span></span><br><span class="line">  <span class="keyword">while</span> (root !== <span class="literal">null</span> || stack.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 将根节点到所有的左节点存入栈中</span></span><br><span class="line">    <span class="keyword">while</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">      stack.push(root);</span><br><span class="line">      root = root.left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始出栈</span></span><br><span class="line">    root = stack.pop();</span><br><span class="line">    <span class="comment">// 出栈元素存入result</span></span><br><span class="line">    result.push(root.val);</span><br><span class="line">    <span class="comment">// 将root改为原root的右节点</span></span><br><span class="line">    root = root.right;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="后续遍历"><a href="#后续遍历" class="headerlink" title="后续遍历"></a>后续遍历</h2><p>题号：<a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历 - 力扣（LeetCode）</a></p><p>顺序：左节点 右节点 根节点</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  <span class="comment">// 后续遍历</span></span><br><span class="line">  <span class="comment">// 左节点 右节点 根节点</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 迭代</span></span><br><span class="line">  <span class="comment">// 借助栈 以及 中间变量</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  <span class="keyword">let</span> preAccess = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (root !== <span class="literal">null</span> || stack.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">      stack.push(root);</span><br><span class="line">      root = root.left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    root = stack.pop();</span><br><span class="line">    <span class="keyword">if</span> (root.right === <span class="literal">null</span> || root.right === preAccess) &#123;</span><br><span class="line">      result.push(root.val);</span><br><span class="line">      preAccess = root;</span><br><span class="line">      root = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      stack.push(root);</span><br><span class="line">      root = root.right;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Leetcode-二叉树的前中后序遍历（迭代）&quot;&gt;&lt;a href=&quot;#Leetcode-二叉树的前中后序遍历（迭代）&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 二叉树的前中后序遍历（迭代）&quot;&gt;&lt;/a&gt;Leetcode 二叉树的前中后序遍历（迭代）&lt;/h1&gt;&lt;p&gt;前文讲过二叉树的递归遍历版本，今天讲一下二叉树的迭代遍历&lt;/p&gt;
&lt;h2 id=&quot;前序遍历&quot;&gt;&lt;a href=&quot;#前序遍历&quot; class=&quot;headerlink&quot; title=&quot;前序遍历&quot;&gt;&lt;/a&gt;前序遍历&lt;/h2&gt;&lt;p&gt;题号：&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-preorder-traversal/&quot;&gt;144. 二叉树的前序遍历 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;顺序：根节点 左节点 右节点&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="http://example.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的前中后序遍历（递归）</title>
    <link href="http://example.com/2022/03/04/Leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E9%80%92%E5%BD%92%EF%BC%89/"/>
    <id>http://example.com/2022/03/04/Leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E9%80%92%E5%BD%92%EF%BC%89/</id>
    <published>2022-03-04T02:14:38.000Z</published>
    <updated>2022-07-29T07:01:44.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-二叉树的前中后序遍历（递归）"><a href="#Leetcode-二叉树的前中后序遍历（递归）" class="headerlink" title="Leetcode 二叉树的前中后序遍历（递归）"></a>Leetcode 二叉树的前中后序遍历（递归）</h1><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><p>题号：<a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历 - 力扣（LeetCode）</a></p><p>顺序：根节点 左节点 右节点</p><p>代码：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 前序遍历</span></span><br><span class="line">  <span class="comment">// 根节点 左节点 右节点</span></span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">const</span> accessTree = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    result.push(root.val);</span><br><span class="line">    accessTree(root.left);</span><br><span class="line">    accessTree(root.right);</span><br><span class="line">  &#125;;</span><br><span class="line">  accessTree(root);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>题号：<a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历 - 力扣（LeetCode）</a></p><p>顺序：左节点 根节点 右节点</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 中序遍历</span></span><br><span class="line">  <span class="comment">// 左子树 根节点 右子树</span></span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">const</span> accessTree = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    accessTree(root.left);</span><br><span class="line">    result.push(root.val);</span><br><span class="line">    accessTree(root.right);</span><br><span class="line">  &#125;;</span><br><span class="line">  accessTree(root);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="后续遍历"><a href="#后续遍历" class="headerlink" title="后续遍历"></a>后续遍历</h2><p>题号：<a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历 - 力扣（LeetCode）</a></p><p>顺序：左节点 右节点 根节点</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  <span class="comment">// 后续遍历</span></span><br><span class="line">  <span class="comment">// 左节点 右节点 根节点</span></span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">const</span> accessTree = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    accessTree(root.left);</span><br><span class="line">    accessTree(root.right);</span><br><span class="line">    result.push(root.val);</span><br><span class="line">  &#125;;</span><br><span class="line">  accessTree(root);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Leetcode-二叉树的前中后序遍历（递归）&quot;&gt;&lt;a href=&quot;#Leetcode-二叉树的前中后序遍历（递归）&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 二叉树的前中后序遍历（递归）&quot;&gt;&lt;/a&gt;Leetcode 二叉树的前中后序遍历（递归）&lt;/h1&gt;&lt;h2 id=&quot;前序遍历&quot;&gt;&lt;a href=&quot;#前序遍历&quot; class=&quot;headerlink&quot; title=&quot;前序遍历&quot;&gt;&lt;/a&gt;前序遍历&lt;/h2&gt;&lt;p&gt;题号：&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-preorder-traversal/&quot;&gt;144. 二叉树的前序遍历 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;顺序：根节点 左节点 右节点&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="http://example.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 订阅发布</title>
    <link href="http://example.com/2022/02/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20%E8%AE%A2%E9%98%85%E5%8F%91%E5%B8%83/"/>
    <id>http://example.com/2022/02/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20%E8%AE%A2%E9%98%85%E5%8F%91%E5%B8%83/</id>
    <published>2022-02-03T08:33:08.000Z</published>
    <updated>2022-08-01T11:09:55.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-订阅发布"><a href="#设计模式-订阅发布" class="headerlink" title="设计模式 订阅发布"></a>设计模式 订阅发布</h1><p>手写一个简单的订阅发布</p><p>代码：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bus = &#123;</span><br><span class="line">  list: [],</span><br><span class="line">  <span class="comment">// 订阅</span></span><br><span class="line">  <span class="function"><span class="title">subscribe</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(callback);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 发布</span></span><br><span class="line">  <span class="function"><span class="title">publish</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历所有list，将回调函数执行</span></span><br><span class="line">    <span class="built_in">this</span>.list.forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      v &amp;&amp; v(value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅者</span></span><br><span class="line">bus.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1111</span>, value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">bus.subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2222</span>, value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布者</span></span><br><span class="line"><span class="comment">// 可以传入参数</span></span><br><span class="line">bus.publish(<span class="string">&quot;fuck&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;设计模式-订阅发布&quot;&gt;&lt;a href=&quot;#设计模式-订阅发布&quot; class=&quot;headerlink&quot; title=&quot;设计模式 订阅发布&quot;&gt;&lt;/a&gt;设计模式 订阅发布&lt;/h1&gt;&lt;p&gt;手写一个简单的订阅发布&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>CSS 基本布局</title>
    <link href="http://example.com/2021/11/13/CSS%20%E5%9F%BA%E6%9C%AC%E5%B8%83%E5%B1%80/"/>
    <id>http://example.com/2021/11/13/CSS%20%E5%9F%BA%E6%9C%AC%E5%B8%83%E5%B1%80/</id>
    <published>2021-11-13T15:14:47.000Z</published>
    <updated>2022-07-28T15:20:28.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-基本布局"><a href="#CSS-基本布局" class="headerlink" title="CSS 基本布局"></a>CSS 基本布局</h1><h2 id="两栏布局"><a href="#两栏布局" class="headerlink" title="两栏布局"></a>两栏布局</h2><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220728231435086.png" alt="image-20220728231435086"></p><p>代码：</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 浮动 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">      float: left;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 500px;</span><br><span class="line">      background-color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">      margin-left: 200px;</span><br><span class="line">      width: auto;</span><br><span class="line">      height: 500px;</span><br><span class="line">      background-color: gold;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/* =============================================== */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* flex */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 200px;</span><br><span class="line">      display: flex;</span><br><span class="line">      background: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left01</span> &#123;</span></span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 100%;</span><br><span class="line">      background: gold;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right01</span> &#123;</span></span><br><span class="line">      flex: 1;</span><br><span class="line">      height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/* =============================================== */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 子绝父相 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">      height: 200px;</span><br><span class="line">      width: 100%;</span><br><span class="line">      background: aqua;</span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son01</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 100%;</span><br><span class="line">      background: palevioletred;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son02</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      height: 100%;</span><br><span class="line">      left: 200px;</span><br><span class="line">      right: 0px;</span><br><span class="line">      background: navy;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 浮动 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 左边一栏固定 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 右边一栏宽度自适应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- flex --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 子绝父相 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h2><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220728231614300.png" alt="image-20220728231614300"></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">      display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">      height: 200px;</span><br><span class="line">      width: 250px;</span><br><span class="line">      background: palegreen;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line">      height: 200px;</span><br><span class="line">      background: palevioletred;</span><br><span class="line">      flex: 1;</span><br><span class="line">      margin: 0 10px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">      height: 200px;</span><br><span class="line">      width: 250px;</span><br><span class="line">      background: blueviolet;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220728231658773.png" alt="image-20220728231658773"></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.fuck01</span> &#123;</span></span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 50%;</span><br><span class="line">      left: 50%;</span><br><span class="line"><span class="css">      <span class="comment">/* transform: translate */</span></span></span><br><span class="line">      transform: translate(-50%, -50%);</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="comment">/* 移动自身一半 */</span></span></span><br><span class="line">      /* margin-left: -50px;</span><br><span class="line">        margin-top: -50px; */</span><br><span class="line">      background: pink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* flex */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: center;</span><br><span class="line">      align-items: center;</span><br><span class="line">      background: blue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.fuck02</span> &#123;</span></span><br><span class="line">      width: 50px;</span><br><span class="line">      height: 50px;</span><br><span class="line">      background: greenyellow;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父相对定位 子绝对定位 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fuck01&quot;</span>&gt;</span>01<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- flex --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fuck02&quot;</span>&gt;</span>02<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CSS-基本布局&quot;&gt;&lt;a href=&quot;#CSS-基本布局&quot; class=&quot;headerlink&quot; title=&quot;CSS 基本布局&quot;&gt;&lt;/a&gt;CSS 基本布局&lt;/h1&gt;&lt;h2 id=&quot;两栏布局&quot;&gt;&lt;a href=&quot;#两栏布局&quot; class=&quot;headerlink&quot; title=&quot;两栏布局&quot;&gt;&lt;/a&gt;两栏布局&lt;/h2&gt;&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220728231435086.png&quot; alt=&quot;image-20220728231435086&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 场景应用基础02</title>
    <link href="http://example.com/2021/11/07/CSS%20%E5%9C%BA%E6%99%AF%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%8002/"/>
    <id>http://example.com/2021/11/07/CSS%20%E5%9C%BA%E6%99%AF%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%8002/</id>
    <published>2021-11-07T14:50:09.000Z</published>
    <updated>2022-07-28T15:19:39.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-场景应用基础-02"><a href="#CSS-场景应用基础-02" class="headerlink" title="CSS 场景应用基础 02"></a>CSS 场景应用基础 02</h1><h2 id="实现一个宽高自适应的正方形"><a href="#实现一个宽高自适应的正方形" class="headerlink" title="实现一个宽高自适应的正方形"></a>实现一个宽高自适应的正方形</h2><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220728230648171.png" alt="image-20220728230648171"></p><p>代码：</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* vw */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.fuck01</span> &#123;</span></span><br><span class="line">      width: 10%;</span><br><span class="line">      height: 10vw;</span><br><span class="line">      background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 元素的margin/padding百分比是相对父元素width的性质来实现 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.fuck02</span> &#123;</span></span><br><span class="line">      width: 20%;</span><br><span class="line">      height: 0px;</span><br><span class="line">      padding-top: 20%;</span><br><span class="line">      background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fuck01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fuck02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现一个梯形"><a href="#实现一个梯形" class="headerlink" title="实现一个梯形"></a>实现一个梯形</h2><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220728230838771.png" alt="image-20220728230838771"></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 直角梯形 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.fuck01</span> &#123;</span></span><br><span class="line">      height: 0px;</span><br><span class="line">      width: 100px;</span><br><span class="line">      border-bottom: 100px solid pink;</span><br><span class="line">      border-right: 40px solid transparent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 等腰梯形 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.fuck02</span> &#123;</span></span><br><span class="line">      height: 0px;</span><br><span class="line">      width: 100px;</span><br><span class="line">      border-bottom: 100px solid pink;</span><br><span class="line">      border-left: 40px solid transparent;</span><br><span class="line">      border-right: 40px solid transparent;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 直角梯形 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fuck01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 等腰梯形01 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fuck02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现一根-0-5px-的线"><a href="#实现一根-0-5px-的线" class="headerlink" title="实现一根 0.5px 的线"></a>实现一根 0.5px 的线</h2><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220728231159877.png" alt="image-20220728231159877"></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.fuck</span> &#123;</span></span><br><span class="line">      border-bottom: 0.5px solid black;</span><br><span class="line">      transform: scale(0.5, 0.5);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fuck&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CSS-场景应用基础-02&quot;&gt;&lt;a href=&quot;#CSS-场景应用基础-02&quot; class=&quot;headerlink&quot; title=&quot;CSS 场景应用基础 02&quot;&gt;&lt;/a&gt;CSS 场景应用基础 02&lt;/h1&gt;&lt;h2 id=&quot;实现一个宽高自适应的正方形&quot;&gt;&lt;a href=&quot;#实现一个宽高自适应的正方形&quot; class=&quot;headerlink&quot; title=&quot;实现一个宽高自适应的正方形&quot;&gt;&lt;/a&gt;实现一个宽高自适应的正方形&lt;/h2&gt;&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220728230648171.png&quot; alt=&quot;image-20220728230648171&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 场景应用基础01</title>
    <link href="http://example.com/2021/11/07/CSS%20%E5%9C%BA%E6%99%AF%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%8001/"/>
    <id>http://example.com/2021/11/07/CSS%20%E5%9C%BA%E6%99%AF%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%8001/</id>
    <published>2021-11-07T14:31:59.000Z</published>
    <updated>2022-07-28T15:18:53.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-场景应用基础-01"><a href="#CSS-场景应用基础-01" class="headerlink" title="CSS 场景应用基础 01"></a>CSS 场景应用基础 01</h1><h2 id="实现一个三角形"><a href="#实现一个三角形" class="headerlink" title="实现一个三角形"></a>实现一个三角形</h2><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220728230033309.png" alt="image-20220728230033309"></p><p>代码：</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.triangle01</span> &#123;</span></span><br><span class="line">      width: 0px;</span><br><span class="line">      height: 0px;</span><br><span class="line">      border: 100px solid;</span><br><span class="line">      border-color: orange blue pink green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.triangle02</span> &#123;</span></span><br><span class="line">      width: 0px;</span><br><span class="line">      height: 0px;</span><br><span class="line">      border-top: 50px solid pink;</span><br><span class="line">      border-left: 50px solid transparent;</span><br><span class="line">      border-right: 50px solid transparent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.triangle03</span> &#123;</span></span><br><span class="line">      width: 0px;</span><br><span class="line">      height: 0px;</span><br><span class="line">      border-bottom: 50px solid pink;</span><br><span class="line">      border-left: 50px solid transparent;</span><br><span class="line">      border-right: 50px solid transparent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.triangle04</span> &#123;</span></span><br><span class="line">      width: 0px;</span><br><span class="line">      height: 0px;</span><br><span class="line">      border-left: 50px solid pink;</span><br><span class="line">      border-top: 50px solid transparent;</span><br><span class="line">      border-bottom: 50px solid transparent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.triangle05</span> &#123;</span></span><br><span class="line">      width: 0px;</span><br><span class="line">      height: 0px;</span><br><span class="line">      border-right: 50px solid pink;</span><br><span class="line">      border-top: 50px solid transparent;</span><br><span class="line">      border-bottom: 50px solid transparent;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle03&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle04&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle05&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现一个扇形"><a href="#实现一个扇形" class="headerlink" title="实现一个扇形"></a>实现一个扇形</h2><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220728230227060.png" alt="image-20220728230227060"></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">      width: 0px;</span><br><span class="line">      height: 0px;</span><br><span class="line">      border-radius: 100px;</span><br><span class="line">      border: 100px solid transparent;</span><br><span class="line">      border-top-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现一个圆和半圆"><a href="#实现一个圆和半圆" class="headerlink" title="实现一个圆和半圆"></a>实现一个圆和半圆</h2><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220728230348986.png" alt="image-20220728230348986"></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.circle</span> &#123;</span></span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: pink;</span><br><span class="line">      border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.half-circle</span> &#123;</span></span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 50px;</span><br><span class="line">      background-color: pink;</span><br><span class="line">      border-radius: 0px 0px 100px 100px;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;half-circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CSS-场景应用基础-01&quot;&gt;&lt;a href=&quot;#CSS-场景应用基础-01&quot; class=&quot;headerlink&quot; title=&quot;CSS 场景应用基础 01&quot;&gt;&lt;/a&gt;CSS 场景应用基础 01&lt;/h1&gt;&lt;h2 id=&quot;实现一个三角形&quot;&gt;&lt;a href=&quot;#实现一个三角形&quot; class=&quot;headerlink&quot; title=&quot;实现一个三角形&quot;&gt;&lt;/a&gt;实现一个三角形&lt;/h2&gt;&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chiguayeshao/pic-bed/image-20220728230033309.png&quot; alt=&quot;image-20220728230033309&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 展开运算符</title>
    <link href="http://example.com/2021/10/22/JavaScript%20%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://example.com/2021/10/22/JavaScript%20%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-10-22T02:31:48.000Z</published>
    <updated>2022-07-28T03:45:52.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-展开运算符"><a href="#JavaScript-展开运算符" class="headerlink" title="JavaScript 展开运算符"></a>JavaScript 展开运算符</h1><h2 id="展开运算符-（…）"><a href="#展开运算符-（…）" class="headerlink" title="展开运算符 （…）"></a>展开运算符 （…）</h2><p>展开运算符，是 ES6 中的新语法，是把可迭代的对象（string，object，数组）展开，可以用在函数调用 / 数组构造的时候，将数组表达式 / string 在语法层面展开，还可以将对象表达式按照 key-value 的方式展开。</p><p>展开运算符只能用于可迭代对象。</p><span id="more"></span><p><strong>函数调用：</strong></p><p>假如你把<code>...</code>放在函数的参数里，就说明这个参数必须是<code>interable object</code>，然后这个对象会被展开成为函数的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> someIterable = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">func(...someIterable);</span><br><span class="line"><span class="comment">// same as func(&#x27;a&#x27;, &#x27;b&#x27;)</span></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">Math</span>.max(-<span class="number">1</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line">&gt; <span class="built_in">Math</span>.max(...[-<span class="number">1</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>])</span><br><span class="line"><span class="number">11</span></span><br><span class="line">&gt; <span class="built_in">Math</span>.max(-<span class="number">1</span>, ...[-<span class="number">5</span>, <span class="number">11</span>], <span class="number">3</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">arr1.push(...arr2); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>数组构造或字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...numbers, <span class="string">&#x27;4&#x27;</span>, ...<span class="string">&#x27;hello&#x27;</span>, <span class="number">6</span>];) <span class="comment">// Array [1, 2, 3, &quot;4&quot;, &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parts = [<span class="string">&#x27;shoulders&#x27;</span>, <span class="string">&#x27;knees&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> lyrics = [<span class="string">&#x27;head&#x27;</span>, ...parts, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;toes&#x27;</span>]; <span class="comment">//  [&quot;head&quot;, &quot;shoulders&quot;, &quot;knees&quot;, &quot;and&quot;, &quot;toes&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组拷贝</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [...arr];</span><br><span class="line">arr2.push(<span class="number">4</span>); <span class="comment">// arr2 此时变成了 [1,2,3,4]. arr不受影响</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//连接多个数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [...arr1, ...arr2]; <span class="comment">// [0,1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象拷贝（浅拷贝，并且不包含prototype）和合并</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">foo</span>:<span class="string">&#x27;bar&#x27;</span>, <span class="attr">x</span>:<span class="number">42</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">foo</span>:<span class="string">&#x27;baz&#x27;</span>, <span class="attr">y</span>:<span class="number">13</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> cloneObj = &#123;...obj1&#125;; <span class="comment">// &#123;foo:&#x27;bar&#x27;, x:42&#125;</span></span><br><span class="line"><span class="keyword">var</span> mergeObj = &#123;...obj1, ...obj2&#125;; <span class="comment">// &#123;foo:&#x27;baz&#x27;, x:42, y:13&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JavaScript-展开运算符&quot;&gt;&lt;a href=&quot;#JavaScript-展开运算符&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 展开运算符&quot;&gt;&lt;/a&gt;JavaScript 展开运算符&lt;/h1&gt;&lt;h2 id=&quot;展开运算符-（…）&quot;&gt;&lt;a href=&quot;#展开运算符-（…）&quot; class=&quot;headerlink&quot; title=&quot;展开运算符 （…）&quot;&gt;&lt;/a&gt;展开运算符 （…）&lt;/h2&gt;&lt;p&gt;展开运算符，是 ES6 中的新语法，是把可迭代的对象（string，object，数组）展开，可以用在函数调用 / 数组构造的时候，将数组表达式 / string 在语法层面展开，还可以将对象表达式按照 key-value 的方式展开。&lt;/p&gt;
&lt;p&gt;展开运算符只能用于可迭代对象。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Map 和 Set</title>
    <link href="http://example.com/2021/10/21/JavaScript%20Map%E5%92%8CSet/"/>
    <id>http://example.com/2021/10/21/JavaScript%20Map%E5%92%8CSet/</id>
    <published>2021-10-21T14:21:19.000Z</published>
    <updated>2022-07-28T03:42:49.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Map-和-Set"><a href="#JavaScript-Map-和-Set" class="headerlink" title="JavaScript Map 和 Set"></a>JavaScript Map 和 Set</h1><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map 是 JS(es6) 的一种字典数据结构, key 值不重复，如果有重复，就会覆盖前面的，任何值都可以作为 Map 的 key， 包括对象，字符，数字，NaN，symbol。</p><p>Map 跟 Object 很像，但是 Object 只能用 string / symbol 作为 Key，Map 可以通过 size 获取键值对个数，而 Object 只能手动计算。</p><p>在 JS 中，<code>NaN === NaN</code>是 false，不过在 Map 里 NaN 被认为是同一个 key：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="literal">NaN</span>, <span class="number">123</span>);</span><br><span class="line">map.get(<span class="literal">NaN</span>); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>但是对于 Object 的 Key，不同的对象，代表的 key 值不同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Map</span>().set(&#123;&#125;, <span class="number">1</span>).set(&#123;&#125;, <span class="number">2</span>).size; <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>Map 有以下 3 种创建方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emptyMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&quot;one&quot;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&quot;two&quot;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&quot;three&quot;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="number">1</span>, <span class="string">&quot;one&quot;</span>).set(<span class="number">2</span>, <span class="string">&quot;two&quot;</span>).set(<span class="number">3</span>, <span class="string">&quot;three&quot;</span>);</span><br></pre></td></tr></table></figure><p>复制 Map:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="literal">false</span>, <span class="string">&quot;no&quot;</span>).set(<span class="literal">true</span>, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> copy = <span class="keyword">new</span> <span class="built_in">Map</span>(original);</span><br></pre></td></tr></table></figure><p>通过 key 拿到 value：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&quot;foo&quot;</span>, <span class="number">123</span>);</span><br><span class="line">map.get(<span class="string">&quot;foo&quot;</span>); <span class="comment">// 123</span></span><br><span class="line">map.get(<span class="string">&quot;bar&quot;</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>其他 Map 的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// .has() checks if a Map has an entry with a given key</span></span><br><span class="line">map.has(<span class="string">&quot;foo&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .delete() remove entries</span></span><br><span class="line">map.delete(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">map.has(<span class="string">&quot;foo&quot;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">&quot;foo&quot;</span>, <span class="literal">true</span>).set(<span class="string">&quot;bar&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// .size retrun the number of entries in a Map</span></span><br><span class="line">map1.size; <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .clear() removes all entries of a Map</span></span><br><span class="line">map1.clear();</span><br><span class="line">map1.size; <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="literal">false</span>, <span class="string">&quot;no&quot;</span>).set(<span class="literal">true</span>, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// .keys() returns an iterable over the keys of a Map</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> map2.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key); <span class="comment">// output: false true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we can use spreading(...) to convert iterable returned by .keys() to an Array</span></span><br><span class="line">[...map2.keys()]; <span class="comment">// [false, true]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .values() quite like .keys(), but for values instead of keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.entries() return an interable over the entries of a Map</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> map2.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(entry);</span><br><span class="line">  <span class="comment">//output:</span></span><br><span class="line">  <span class="comment">//[false, &#x27;no&#x27;]</span></span><br><span class="line">  <span class="comment">//[ture, &#x27;yes&#x27;]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// we can use sperading(...) to convert iterable returned by .entries() to an Array;</span></span><br><span class="line">[...map.entries()]; <span class="comment">// [[false, &#x27;no&#x27;], [true, &#x27;yes&#x27;]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// we also can use below way to access key and value</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value);</span><br><span class="line">  <span class="comment">// output:</span></span><br><span class="line">  <span class="comment">//false, &#x27;no&#x27;</span></span><br><span class="line">  <span class="comment">//true, &#x27;yes&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要 Map 只含有 strings 和 symbols 作为 key，那么就可以直接把这个 Map 转为 Object：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;a&quot;</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">&quot;b&quot;</span>, <span class="number">2</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.fromEntries(map); <span class="comment">// &#123; a:1, b:2&#125;</span></span><br></pre></td></tr></table></figure><p>也可以把 Object 转换为 Map：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// new Map([[&#x27;a&#x27;,1], [&#x27;b&#x27;,2]])</span></span><br></pre></td></tr></table></figure><p>应用： 计算字符串中，字符出现的次数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countChars</span>(<span class="params">chars</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> charCounts = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> chars) &#123;</span><br><span class="line">    ch = ch.toLowerCase();</span><br><span class="line">    <span class="keyword">const</span> prevCount = charCounts.get(ch);</span><br><span class="line">    prevCount ? charCounts.set(ch, prevCount + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> charCounts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要像数组一样，map 和 filter， 那么就必须要把 Map 先转化为数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>).set(<span class="number">2</span>, <span class="string">&quot;b&quot;</span>).set(<span class="number">3</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mappedMap = <span class="keyword">new</span> <span class="built_in">Map</span>( <span class="comment">//step 3</span></span><br><span class="line">  [...originalMap] <span class="comment">//setp 1</span></span><br><span class="line">    .map(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> [k * <span class="number">2</span>, <span class="string">&quot;_&quot;</span> + v]) <span class="comment">//step 2</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 相当于：new Map([[2, &#x27;_a&#x27;], [4, &#x27;_b&#x27;], [6, &#x27;_c&#x27;]])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filteredMap = <span class="keyword">new</span> <span class="built_in">Map</span>( <span class="comment">// step 3</span></span><br><span class="line">  [...originalMap] <span class="comment">//step 1</span></span><br><span class="line">    .filter(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> k &lt; <span class="number">3</span>) <span class="comment">//setp 2</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 相当于：new Map([[1,&#x27;a&#x27;], [2, &#x27;b&#x27;]])</span></span><br></pre></td></tr></table></figure><p>如果想要，合并两个 Map:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="number">1</span>, <span class="string">&quot;1a&quot;</span>).set(<span class="number">2</span>, <span class="string">&quot;1b&quot;</span>).set(<span class="number">3</span>, <span class="string">&quot;1c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="number">2</span>, <span class="string">&quot;2b&quot;</span>).set(<span class="number">3</span>, <span class="string">&quot;2c&quot;</span>).set(<span class="number">4</span>, <span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> combinedMap = <span class="keyword">new</span> <span class="built_in">Map</span>([...map1, ...map2]);</span><br><span class="line"><span class="comment">// 相当于：new Map([[1,&#x27;1a&#x27;],[2,&#x27;2b&#x27;],[3,&#x27;2c&#x27;],[4, &#x27;2d&#x27;]])</span></span><br></pre></td></tr></table></figure><h2 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h2><p>WeakMap 跟 Map 非常像，只不过多了以下的限制：</p><ul><li>WeakMap 就是一个黑盒子<ul><li>我们不能直接通过 keys / values / entries 来 iterate 或者是 loop WeakMap，并且不能计算它的 size。</li><li>我们不能清除 WeakMap，如有需要，只能重新创建一个。</li></ul></li><li>WeakMap 的 key，必须是 objects<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">wm.set(<span class="number">123</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">// TypeError: Invalid value used as weak map key</span></span><br></pre></td></tr></table></figure></li><li>WeakMap 的 key 是弱引用<ul><li>正常来说，如果有对象还被引用，那么就不会被垃圾回收。但是 WeakMap 不一样，在 object 作为 key 的时候，是可以被垃圾回收的，这会导致整个 entry 也被删掉，并且这个没办法检测到这种行为。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  vm.set(obj, <span class="string">&quot;attachedValue&quot;</span>); <span class="comment">// (A)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (B)</span></span><br></pre></td></tr></table></figure>在 (A) 这一行我们给 obj 这个 key 赋值，但是在 (B) 这一行，obj 这个 entry 就有可能被垃圾回收掉了，但是 vm 还在，并且没办法手动删掉 vm</li></ul></li></ul><p>应用：</p><ul><li><p>用 WeakMap 来保存计算结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countOwnKeys</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (cache.has(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> [cache.get(obj), <span class="string">&quot;cached&quot;</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="built_in">Object</span>.keys(obj).length;</span><br><span class="line">    cache.set(obj, count);</span><br><span class="line">    <span class="keyword">return</span> [count, <span class="string">&quot;computed&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用 WeakMap 来保存 private data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _counter = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> _action = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Countdown</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">counter, action</span>)</span> &#123;</span><br><span class="line">    _counter.set(<span class="built_in">this</span>, counter);</span><br><span class="line">    _action.set(<span class="built_in">this</span>, action);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">dec</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = _counter.get(<span class="built_in">this</span>);</span><br><span class="line">    counter--;</span><br><span class="line">    _counter.set(<span class="built_in">this</span>, counter);</span><br><span class="line">    <span class="keyword">if</span> (counter === <span class="number">0</span>) &#123;</span><br><span class="line">      _action.get(<span class="built_in">this</span>)();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WeakMap 的方法有:</p></li><li><p>new WeakMap()</p></li><li><p>.delete(key)</p></li><li><p>.get(key)</p></li><li><p>.has(key)</p></li><li><p>.set(key,value)</p></li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set 跟数组很像，但是成员的值都是唯一的，没有重复的值，并且 Set 对象允许存储任何类型的值，无论是原始值或者是对象引用。Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。</p><p>有以下三种方式创建 Set：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emptySet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="string">&quot;red&quot;</span>).add(<span class="string">&quot;green&quot;</span>).add(<span class="string">&quot;blue&quot;</span>);</span><br></pre></td></tr></table></figure><p>常用的 Set 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .add() addsd an element to a Set</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> set();</span><br><span class="line">set.add(<span class="string">&quot;red&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// .has() checks if an elements is a member of a Set</span></span><br><span class="line">set.has(<span class="string">&quot;red&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .delete() removes an element from a Set</span></span><br><span class="line">set.delete(<span class="string">&quot;red&quot;</span>); <span class="comment">// true</span></span><br><span class="line">set.has(<span class="string">&quot;red&quot;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .size contains the number of elements in a Set</span></span><br><span class="line"><span class="keyword">const</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="string">&quot;foo&quot;</span>).add(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">set1.size; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .clear() removes all elements of a Set</span></span><br><span class="line">set1.clear();</span><br><span class="line">set1.size; <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterating over Sets</span></span><br><span class="line"><span class="keyword">const</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> set2) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="comment">//outouts:</span></span><br><span class="line">  <span class="comment">//&#x27;red&#x27;</span></span><br><span class="line">  <span class="comment">//&#x27;green&#x27;,</span></span><br><span class="line">  <span class="comment">//&#x27;blue&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use spreading(...) to convert set to array</span></span><br><span class="line"><span class="keyword">const</span> set3 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]);</span><br><span class="line"><span class="keyword">const</span> arr = [...set3]; <span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure><p>应用：</p><p>移除数组中的重复项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set4 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> arr = [...set4]; <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure><p>字符串是 iterable，所以也可以作为 Set 的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]); <span class="comment">//这两个是一样的</span></span><br></pre></td></tr></table></figure><p>NaN 对于 Set 来说也是一个值，对于任何 Object 都是不同的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>]);</span><br><span class="line">set.size; <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">cosnt set1 = <span class="keyword">new</span> <span class="built_in">Set</span>([&#123;&#125;, &#123;&#125;]);</span><br><span class="line">set.size; <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>Union 两个 Set：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">const</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]); <span class="comment">// new Set([1,2,3,4])</span></span><br></pre></td></tr></table></figure><p>Intersection 两个 Set：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">const</span> intersection = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function">(<span class="params">x</span>) =&gt;</span> b.has(x))); <span class="comment">// new Set([2,3])</span></span><br></pre></td></tr></table></figure><p>Difference 两个 Set：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">const</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function">(<span class="params">x</span>) =&gt;</span> !b.has(x))); <span class="comment">// new Set([1, 4])</span></span><br></pre></td></tr></table></figure><p>Mapping over Set:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> mappedSet = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].map(<span class="function">(<span class="params">x</span>) =&gt;</span> x * <span class="number">2</span>)); <span class="comment">// new Set([2,4,6])</span></span><br></pre></td></tr></table></figure><p>Filtering Set:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="keyword">const</span> filteredSet = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].filter(<span class="function">(<span class="params">x</span>) =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>)); <span class="comment">// new Set([2,4])</span></span><br></pre></td></tr></table></figure><h2 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h2><p>WeakSet 跟 Set 很像，只不过多了下面的限制：</p><ul><li>WeakSet 是个黑盒子<ul><li>我们不能直接通过 keys / values / entries 来 iterate 或者是 loop WeakMap，并且不能计算它的 size。</li><li>我们不能清除 WeakMap，如有需要，只能重新创建一个。</li></ul></li><li>WeakSet 的 key 是弱引用<ul><li>正常来说，如果有对象还被引用，那么就不会被垃圾回收。但是 WeakSet 不一样，在 object 作为 key 的时候，是可以被垃圾回收的，这会导致整个 entry 也被删掉，并且这个没办法检测到这种行为。</li></ul></li></ul><p>WeakSet 的方法有:</p><ul><li>new WeakSet()</li><li>.delete(value)</li><li>.get(value)</li><li>.has(value)</li><li>.set(value)</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JavaScript-Map-和-Set&quot;&gt;&lt;a href=&quot;#JavaScript-Map-和-Set&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Map 和 Set&quot;&gt;&lt;/a&gt;JavaScript Map 和 Set&lt;/h1&gt;&lt;h2 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h2&gt;&lt;p&gt;Map 是 JS(es6) 的一种字典数据结构, key 值不重复，如果有重复，就会覆盖前面的，任何值都可以作为 Map 的 key， 包括对象，字符，数字，NaN，symbol。&lt;/p&gt;
&lt;p&gt;Map 跟 Object 很像，但是 Object 只能用 string / symbol 作为 Key，Map 可以通过 size 获取键值对个数，而 Object 只能手动计算。&lt;/p&gt;
&lt;p&gt;在 JS 中，&lt;code&gt;NaN === NaN&lt;/code&gt;是 false，不过在 Map 里 NaN 被认为是同一个 key：&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
